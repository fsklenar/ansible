---
- hosts: vms
  become: true
  vars_files:
    - ../vars/common_vars.yaml

  tasks:

    - name: Install required system packages
      apt:
        pkg:
          - munin-node
          - apt-transport-https
          - ca-certificates
          - curl
        state: latest
        update_cache: true

    - name: Allow cidr to Munin
      lineinfile:
        path: /etc/munin/munin-node.conf
        state: present
        regexp: '^cidr_allow 192.168.0.0/24'
        line: 'cidr_allow 192.168.0.0/24'

    # - name: Add cluster-endpoint to /etc/hosts
    #   lineinfile:
    #     path: /etc/hosts
    #     state: present
    #     regexp: '^192.168.0.202 cluster-endpoint'
    #     line: '192.168.0.202 cluster-endpoint'


    - name: Add hostname to /etc/hosts - controlplane
      lineinfile:
        path: /etc/hosts
        state: present
        regexp: '^{{ controlplane_hostname }}'
        line: '{{ controlplane_ip }} {{ controlplane_hostname }}'

    - name: Add hostname to /etc/hosts - worker01
      lineinfile:
        path: /etc/hosts
        state: present
        regexp: '^{{ worker01_hostname }}'
        line: '{{ worker01_ip }} {{ worker01_hostname }}'

    - name: Add hostname to /etc/hosts - worker02
      lineinfile:
        path: /etc/hosts
        state: present
        regexp: '^{{ worker02_hostname }}'
        line: '{{ worker02_ip }} {{ worker02_hostname }}'

    - name: Add hostname to /etc/hosts for Web applications
      lineinfile:
        path: /etc/hosts
        state: present
        regexp: '^webapp-dev'
        line: '{{ controlplane_ip }} webapp-dev.local'

    - name: Set up the IPV4 bridge - overlay
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        state: present
        regexp: '^overlay'
        line: 'overlay'
        create: true

    - name: Set up the IPV4 bridge - br_netfilter
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        state: present
        regexp: '^br_netfilter'
        line: 'br_netfilter'
        create: true

    - name: Set some kernel parameters
      lineinfile:
        create: true
        dest: /etc/sysctl.conf
        #dest: /etc/sysctl.d/k8s.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^net.bridge.bridge-nf-call-iptables', line: 'net.bridge.bridge-nf-call-iptables = 1' }
        - { regexp: '^net.bridge.bridge-nf-call-ip6tables', line: 'net.bridge.bridge-nf-call-ip6tables = 1' }
        - { regexp: '^net.ipv4.ip_forward', line: 'net.ipv4.ip_forward = 1' }

    - name: Keyrings rights, install cert
      shell: |
        sudo mkdir -p -m 755 /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ kubectl_ver }}/deb/Release.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubectl_ver }}/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly

    - name: Install kubectl, kubeadm, kubelet
      apt:
        pkg:
          - kubectl
          - kubeadm
          - kubelet
          - etcd-client
        state: present
        update_cache: true

    - name: Install etcd-client on master node
      apt:
        pkg:
          - etcd-client
        state: present
        update_cache: true
      when: 'controlplane_hostname  | string in inventory_hostname'


    - name: Hold kubeadm
      dpkg_selections:
        name: kubeadm
        selection: hold

    - name: Hold kubelet
      dpkg_selections:
        name: kubelet
        selection: hold

    - name: Hold kubectl
      dpkg_selections:
        name: kubectl
        selection: hold

    - name: RUNC installation
      shell: |
        cd /tmp
        wget https://github.com/opencontainers/runc/releases/download/{{ runc_version }}/runc.amd64
        install -m 755 /tmp/runc.amd64 /usr/bin/runc

    - name: CNI plugins
      shell: |
        cd /tmp
        wget https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-amd64-{{ cni_version }}.tgz
        mkdir -p /opt/cni/bin
        tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-{{ cni_version }}.tgz

    - name: Containerd - create default configuration
      shell: |
        containerd config default > /etc/containerd/config.toml

    - name: CRI configuration
      lineinfile:
        path: /etc/containerd/config.toml
        state: present
        regexp: '^            SystemdCgroup = false'
        line: '            SystemdCgroup = true'

    - name: create /srv/virtiofs folder for Persistent Volume
      file:
        path: /srv/virtiofs
        state: directory
        mode: '0770'
        owner: "root"
        group: "{{ ansible_username }}"

    - name: Mount virtiofs
      ansible.posix.mount:
        path: /srv/virtiofs
        src: sharedfs
        fstype: virtiofs
        state: present


